var documenterSearchIndex = {"docs":
[{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/","page":"Library Reference","title":"Library Reference","text":"GaussianDistribution\nGaussianDistribution(Σ::AbstractMatrix)\nGaussianDistribution(μ::AbstractVector)\n\nGaussianRelation\nGaussianRelation(M::AbstractMatrix)\nGaussianRelation(ψ::GaussianDistribution)\n\nGaussRelDom\n\nparams\ncov\nmean","category":"page"},{"location":"api/#AlgebraicInference.GaussianDistribution","page":"Library Reference","title":"AlgebraicInference.GaussianDistribution","text":"GaussianDistribution(Σ, μ)\n\nA multivariate Gaussian distribution with covariance matrix Sigma and mean mu.\n\n\n\n\n\n","category":"type"},{"location":"api/#AlgebraicInference.GaussianDistribution-Tuple{AbstractMatrix}","page":"Library Reference","title":"AlgebraicInference.GaussianDistribution","text":"GaussianDistribution(Σ::AbstractMatrix)\n\nConstruct a centered Gaussian distribution with covariance matrix Sigma.\n\n\n\n\n\n","category":"method"},{"location":"api/#AlgebraicInference.GaussianDistribution-Tuple{AbstractVector}","page":"Library Reference","title":"AlgebraicInference.GaussianDistribution","text":"GaussianDistribution(μ::AbstractVector)\n\nConstruct a Dirac distribution with mean mu.\n\n\n\n\n\n","category":"method"},{"location":"api/#AlgebraicInference.GaussianRelation","page":"Library Reference","title":"AlgebraicInference.GaussianRelation","text":"GaussianRelation(L, R, ψ)\n\nA Gaussian relation, i.e. a decorated cospan with legs L, R and decoration ψ.\n\n\n\n\n\n","category":"type"},{"location":"api/#AlgebraicInference.GaussianRelation-Tuple{AbstractMatrix}","page":"Library Reference","title":"AlgebraicInference.GaussianRelation","text":"GaussianRelation(L::AbstractMatrix)\n\nConstruct a Gaussian relation d m to n from a linear transformation L mathbbR^m to mathbbR^n.\n\n\n\n\n\n","category":"method"},{"location":"api/#AlgebraicInference.GaussianRelation-Tuple{GaussianDistribution}","page":"Library Reference","title":"AlgebraicInference.GaussianRelation","text":"GaussianRelation(ψ::GaussianDistribution)\n\nConstruct a Gaussian relation d 0 to n from a Gaussian distribution psi on mathbbR^n.\n\n\n\n\n\n","category":"method"},{"location":"api/#AlgebraicInference.GaussRelDom","page":"Library Reference","title":"AlgebraicInference.GaussRelDom","text":"GaussRelDom(n)\n\nThe domain or codomain of a Gaussian relation.\n\n\n\n\n\n","category":"type"},{"location":"api/#StatsAPI.params","page":"Library Reference","title":"StatsAPI.params","text":"params(d::GaussianRelation)\n\nRepresent a Gaussian relation d m to n as an extended Gaussian distribution mathcalN(mu Sigma) + textnull  D on mathbbR^m + n.\n\nReturns a five-tuple (Σ μ D B b). If b notin textcol  B, then d is equal to the failure morphism bot m to n.\n\n\n\n\n\n","category":"function"},{"location":"api/#Statistics.cov","page":"Library Reference","title":"Statistics.cov","text":"cov(ψ::GaussianDistribution)\n\nReturn the covariance matrix corresponding to ψ.\n\n\n\n\n\ncov(d::GaussianRelation)\n\nReturn a representative of the covariance matrix corresponding to d.\n\n\n\n\n\n","category":"function"},{"location":"api/#Statistics.mean","page":"Library Reference","title":"Statistics.mean","text":"mean(ψ::GaussianDistributon)\n\nReturn the mean vector corresponding to ψ.\n\n\n\n\n\nmean(d::GaussianRelation)\n\nReturn a representative of the mean vector corresponding to d.\n\n\n\n\n\n","category":"function"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"EditURL = \"https://github.com/samuelsonric/AlgebraicInference.jl/blob/master/docs/literate/kalman.jl\"","category":"page"},{"location":"generated/kalman/#Kalman-Filter","page":"Examples","title":"Kalman Filter","text":"","category":"section"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"Constructing the Kalman filter described in Example 9 – Vehicle Location Estimation.","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"using AlgebraicInference\nusing Catlab, Catlab.Theories, Catlab.Graphics, Catlab.WiringDiagrams\nimport Convex, SCS\nimport TikzPictures","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"First, we construct a diagram representing the filter's prediction step.","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"O = mzero(FreeAbelianBicategoryRelations.Ob)\nX = Ob(FreeAbelianBicategoryRelations, :X)\nQ = Hom(:Q, O, X)\nF = Hom(:F, X, X)\n\nkalman_predict = (F ⊕ Q) ⋅ plus(X)\nto_tikz(kalman_predict)","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"Next, we construct a diagram representing the filter's observation step.","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"Z = Ob(FreeAbelianBicategoryRelations, :Z)\nR = Hom(:R, O, Z)\nH = Hom(:H, X, Z)\n\nkalman_observe = Δ(X) ⋅ (id(X) ⊕ H ⊕ R) ⋅ (id(X) ⊕ plus(Z))\nto_tikz(kalman_observe)","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"Finally, we construct a diagram representing two iterations of the filter.","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"P₀ = Hom(:P_0, O, X)\nz₁ = Hom(:z_1, O, Z)\nz₂ = Hom(:z_2, O, Z)\n\nkalman_filter = P₀\nkalman_filter = kalman_filter ⋅ kalman_predict ⋅ kalman_observe ⋅ (id(X) ⊕ dagger(z₁))\nkalman_filter = kalman_filter ⋅ kalman_predict ⋅ kalman_observe ⋅ (id(X) ⊕ dagger(z₂))\nto_tikz(kalman_filter)","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"To perform a computation, we assign data to the boxes and wires of our filter diagram. The output is a Gaussian relation, representing the estimated state tat time t = 2 given observations z_1 and z_2.","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"types = (GaussRelDom, GaussianRelation)\n\ngenerators = Dict(\n    X => GaussRelDom(6),\n    Z => GaussRelDom(2),\n    F => GaussianRelation([\n        1   1   1/2 0   0   0\n        0   1   1   0   0   0\n        0   0   1   0   0   0\n        0   0   0   1   1   1/2\n        0   0   0   0   1   1\n        0   0   0   0   0   1\n    ]),\n    H => GaussianRelation([\n        1   0   0   0   0   0\n        0   0   0   1   0   0\n    ]),\n    Q => GaussianRelation(GaussianDistribution([\n        1/4 1/2 1/2 0   0   0\n        1/2 1   1   0   0   0\n        1/2 1   1   0   0   0\n        0   0   0   1/4 1/2 1/2\n        0   0   0   1/2 1   1\n        0   0   0   1/2 1   1\n    ] * 1/25)),\n    R => GaussianRelation(GaussianDistribution([\n        9   0\n        0   9\n    ])),\n    P₀ => GaussianRelation(GaussianDistribution([\n        500 0   0   0   0   0\n        0   500 0   0   0   0\n        0   0   500 0   0   0\n        0   0   0   500 0   0\n        0   0   0   0   500 0\n        0   0   0   0   0   500\n    ])),\n    z₁ => GaussianRelation(GaussianDistribution([-393.66, 300.40])),\n    z₂ => GaussianRelation(GaussianDistribution([-375.93, 301.78])),\n)\n\nd = functor(types, kalman_filter; generators)","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"The covariance of the estimated state at time t = 2.","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"round.(cov(d); digits=2)","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"The mean of the estimated state at time t = 2.","category":"page"},{"location":"generated/kalman/","page":"Examples","title":"Examples","text":"round.(mean(d); digits=2)","category":"page"},{"location":"#AlgebraicInference.jl","page":"AlgebraicInference.jl","title":"AlgebraicInference.jl","text":"","category":"section"},{"location":"","page":"AlgebraicInference.jl","title":"AlgebraicInference.jl","text":"AlgebraicInference.jl is a library for compositional Bayesian inference. It builds on Catlab.jl.","category":"page"}]
}
